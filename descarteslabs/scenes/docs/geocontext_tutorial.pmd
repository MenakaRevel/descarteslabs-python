Tutorial
========

Often, you don't have to create GeoContexts yourself---an `AOI`
with default parameters is created for you by `scenes.search <scenes._search.search>`
and `Scene.from_id`.

```{python, echo = False}
# Limit what we import to limit the dependencies we need
import descarteslabs.client.services.raster
import descarteslabs.scenes

import types
dl = types.ModuleType("descarteslabs")

dl.Raster = descarteslabs.client.services.raster.Raster
dl.scenes = descarteslabs.scenes
```

```{python, evaluate = False}
import descarteslabs as dl
```

```{python, term = True, wrap = False}
scene, default_ctx = dl.scenes.Scene.from_id('landsat:LC08:PRE:TOAR:meta_LC80260322013188_v1')

default_ctx
```

GeoContexts are immutable; instead, create copies with new values using `AOI.assign`.
(Assigning new values to DLTiles is not yet supported.)

```{python, term = True, wrap = False, width = "4in", f_size = (4, 4)}
# let's use a lower resolution to load images faster
lowres = default_ctx.assign(resolution=75)
lowres_arr = scene.ndarray("red green blue", lowres)

dl.scenes.display(lowres_arr, size=4, title="Default GeoContext, 75-meter resolution")
```

You can also create GeoContexts explicitly:

```{python, term = True, wrap = False, width = "4in", f_size = (4, 4)}
import shapely.affinity

# make a new polygon half the size of the scene's full extent
new_cutline = shapely.affinity.scale(scene.geometry, xfact=0.5, yfact=0.5)

webmerc_cutline_aoi = dl.scenes.AOI(
    geometry=new_cutline,
    resolution=75,
    crs="EPSG:3857"  # "EPSG:3857" is the code for the Web Mercator
)                    # coordinate reference system, see http://epsg.io/3857

webmerc_cutline_arr = scene.ndarray("red green blue", webmerc_cutline_aoi)

dl.scenes.display(webmerc_cutline_arr, size=4, title="Same scene, with cutline and Web Mercator")
```

Let's assign our new cutline to the default GeoContext
to see the difference between the coordinate reference systems:

```{python, term = True, wrap = False, width = "4in", f_size = (4, 4)}
with_cutline = lowres.assign(geometry=new_cutline)

with_cutline_arr = scene.ndarray("red green blue", with_cutline)

dl.scenes.display(with_cutline_arr, size=4, title="Original GeoContext with new cutline")
```

Why is there all that empty space around the sides?
We assigned a new geometry, but we didn't change the *bounds*.
Bounds determine the x-y extent that's rasterized; geometry just clips within that.
You can pass ``bounds="update"`` to compute new bounds when assinging a new geometry.

```{python, term = True, wrap = False, width = '4in', f_size = (4, 4)}
cutline_bounds = lowres.assign(geometry=new_cutline, bounds="update")
cutline_bounds_arr = scene.ndarray("red green blue", cutline_bounds)

dl.scenes.display(cutline_bounds_arr, size=4, title="Original GeoContext, new cutline and bounds")
```

Bounds can be expressed in any coordinate reference system, set in ``bounds_crs``.
They're typically either in the native CRS of the Scene, or in WGS84 when clipping to a geometry.
Note that when computing bounds from a geometry, ``bounds_crs`` is automatically set to
``"EPSG:4326"`` (short for WGS84 lat-lon coordinates), since that's the CRS in which
the geometry is also defined.

You can also use DLTiles to split up regions along a grid:

```{python, term = True, wrap = False, width = "3in", f_size = (3, 6)}
tiles = dl.scenes.DLTile.from_shape(
    new_cutline,
    resolution=75,
    tilesize=256, pad=16
)

len(tiles)

tile0_arr = scene.ndarray("red green blue", tiles[0])
tile1_arr = scene.ndarray("red green blue", tiles[1])

dl.scenes.display(tile0_arr, tile1_arr, title=[tiles[0].key, tiles[1].key], size=3)
```
